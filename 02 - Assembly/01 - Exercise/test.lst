     1                                  
     2                                  ;http://www.nasm.us/doc/nasmdoc0.html
     3                                  ;http://www.posix.nl/linuxassembly/nasmdochtml/nasmdoc0.html
     4                                  ;https://godbolt.org/
     5                                  
     6                                  extern printf
     7                                  extern putchar
     8                                  
     9                                  SECTION .data		
    10 00000000 05000000                        a:	dd	5
    11 00000004 613D25642C20656178-             fmt:    db      "a=%d, eax=%d", 33, 10, 10, 0
    12 0000000D 3D2564210A0A00     
    13 00000014 3031292048692D2564-             str:	db      "01) Hi-%d", 33, 0x21, 10, 0
    14 0000001D 21210A00           
    15                                          str_len equ $-str
    16                                          
    17 00000021 253264292054657374-             test_str: db "%2d) Test FCN Called!!!", 10, 0
    18 0000002A 2046434E2043616C6C-
    19 00000033 65642121210A00     
    20                                          test_str_len equ $-test_str
    21                                          
    22 0000003A 253264292054657374-             test_str2: db "%2d) Test FCN2 Called!!!", 10, 0
    23 00000043 2046434E322043616C-
    24 0000004C 6C65642121210A00   
    25                                          test_str2_len equ $-test_str2
    26                                  
    27 00000054 0A444F4E45210A00                done: db 10, "DONE!", 10, 0
    28                                          done_len equ $-done
    29                                  
    30                                  
    31                                  SECTION .bss			; Section containing uninitialized data
    32                                  
    33                                          BUFFLEN	equ 1024	; Length of buffer
    34 00000000 <res 00000400>                  buff: 	resb BUFFLEN	; Text buffer itself
    35                                          
    36                                  
    37                                  SECTION .text
    38                                  
    39                                      global main		; the standard gcc entry point
    40                                      main:
    41 00000000 55                                  push    ebp		; set up stack frame
    42 00000001 89E5                                mov     ebp,esp     
    43                                  
    44 00000003 A1[00000000]                        mov	    eax, [a]	; put a from store into register
    45 00000008 0521000000                          add	    eax, 33	; a+33
    46 0000000D 50                                  push    eax		; push onto stack
    47 0000000E FF35[00000000]                      push    dword [a]	; value of variable a
    48 00000014 68[04000000]                        push    dword fmt	; address of ctrl string
    49 00000019 E8(00000000)                        call    printf	; Call C function
    50 0000001E 81C40C000000                        add     esp, 12	; pop 3 ints
    51                                              
    52 00000024 680D000000                          push    dword str_len
    53 00000029 8D05[15000000]                      lea     eax, [str + 1] ;skip first char in string
    54 0000002F 50                                  push    eax
    55 00000030 E8(00000000)                        call    printf	; Call C function
    56 00000035 81C408000000                        add     esp, 8	; pop 2 ints
    57                                  
    58 0000003B E830000000                          call    test_fcn
    59 00000040 E84A000000                          call    test_fcn2
    60                                              
    61 00000045 B908000000                          mov	    ecx, done_len
    62 0000004A BE[54000000]                        mov	    esi, done
    63 0000004F BF[00000000]                        mov	    edi, buff
    64 00000054 FC                                  cld
    65 00000055 F3A4                                rep     movsb
    66                                              
    67 00000057 68[00000000]                        push    buff
    68 0000005C E8(00000000)                        call    printf
    69 00000061 81C404000000                        add     esp, 4	; pop int
    70                                              
    71                                              
    72 00000067 89EC                                mov     esp, ebp	; takedown stack frame
    73 00000069 5D                                  pop     ebp		; same as "leave" op
    74                                  
    75 0000006A B800000000                          mov	    eax,0	;  normal, no error, return value
    76 0000006F C3                                  ret			; return
    77                                              
    78                                  
    79                                      test_fcn:
    80 00000070 C8000001                            enter   0, 1
    81 00000074 B90A000000                          mov     ecx, 10
    82                                          .beg_loop:
    83 00000079 51                                  push    ecx
    84 0000007A 68[21000000]                        push    test_str
    85 0000007F E8(00000000)                        call    printf
    86 00000084 81C404000000                        add     esp, 4	; pop int
    87 0000008A 59                                  pop     ecx
    88 0000008B E2EC                                loop    .beg_loop, ecx
    89                                          
    90 0000008D C9                                  leave
    91 0000008E C3                                  ret
    92                                              
    93                                  
    94                                      test_fcn2:
    95 0000008F C8000001                            enter   0, 1
    96 00000093 680A000000                          push    10
    97 00000098 E8(00000000)                        call    putchar
    98 0000009D 81C404000000                        add     esp, 4
    99                                              
   100 000000A3 B90A000000                          mov     ecx, 10
   101                                              
   102                                          .beg_loop:
   103 000000A8 51                                  push    ecx
   104 000000A9 68[3A000000]                        push    test_str2
   105 000000AE E8(00000000)                        call    printf
   106 000000B3 81C404000000                        add     esp, 4	; pop int
   107 000000B9 59                                  pop     ecx
   108 000000BA 81E901000000                        sub     ecx, 1      ;decrement loop counter by 1
   109 000000C0 75E6                                jnz     .beg_loop
   110                                              
   111                                              
   112 000000C2 68[54000000]                        push    done
   113 000000C7 E8(00000000)                        call    printf
   114 000000CC 81C404000000                        add     esp, 4	; pop int
   115                                              
   116 000000D2 C9                                  leave
   117 000000D3 C3                                  ret
   118                                  
   119                                          
