     1                                  ;http://www.nasm.us/doc/nasmdoc0.html
     2                                  ;http://www.posix.nl/linuxassembly/nasmdochtml/nasmdoc0.html
     3                                  ;https://godbolt.org/
     4                                  ;https://linux.die.net/man/1/objdump
     5                                  
     6                                  extern printf
     7                                  extern putchar
     8                                  extern strlen
     9                                  
    10                                  SECTION .data		
    11 00000000 05000000                        a:	dd	5
    12 00000004 613D25642C20656178-             fmt:    db      "a=%d, eax=%d", 33, 10, 10, 0
    13 0000000D 3D2564210A0A00     
    14 00000014 3031292048692D2564-             str:	db      "01) Hi-%d", 33, 0x21, 10, 0
    15 0000001D 21210A00           
    16                                          str_len equ $-str
    17                                          
    18 00000021 253264292054657374-             test_str: db "%2d) Test FCN Called!!!", 10, 0
    19 0000002A 2046434E2043616C6C-
    20 00000033 65642121210A00     
    21                                          test_str_len equ $-test_str
    22                                          
    23 0000003A 253264292054657374-             test_str2: db "%2d) Test FCN2 Called!!!", 10, 0
    24 00000043 2046434E322043616C-
    25 0000004C 6C65642121210A00   
    26                                          test_str2_len equ $-test_str2
    27                                  
    28 00000054 0A444F4E4521210A00              done: db 10, "DONE!!", 10, 0
    29                                          done_len equ $-done
    30                                          
    31 0000005D 0A0A25326429205265-             result_str: db 10,10,"%2d) Result = %d", 10, 10, 0
    32 00000066 73756C74203D202564-
    33 0000006F 0A0A00             
    34                                  
    35                                  
    36                                  SECTION .bss			; Section containing uninitialized data
    37                                  
    38                                          BUFFLEN	equ 1024	; Length of buffer
    39 00000000 <res 00000400>                  buff: 	resb BUFFLEN	; Text buffer itself
    40                                          
    41                                  
    42                                  SECTION .text
    43                                  
    44                                      global main		; the standard gcc entry point
    45                                      main:
    46 00000000 55                                  push    ebp		; set up stack frame
    47 00000001 89E5                                mov     ebp,esp     
    48                                  
    49 00000003 A1[00000000]                        mov	    eax, [a]	; put a from store into register
    50 00000008 0521000000                          add	    eax, 33	; a+33
    51 0000000D 50                                  push    eax		; push onto stack
    52 0000000E FF35[00000000]                      push    dword [a]	; value of variable a
    53 00000014 68[04000000]                        push    dword fmt	; address of ctrl string
    54 00000019 E8(00000000)                        call    printf	; Call C function
    55 0000001E 81C40C000000                        add     esp, 12	; pop 3 ints
    56                                              
    57 00000024 680D000000                          push    dword str_len
    58 00000029 8D05[15000000]                      lea     eax, [str + 1] ;skip first char in string
    59 0000002F 50                                  push    eax
    60 00000030 E8(00000000)                        call    printf	; Call C function
    61 00000035 81C408000000                        add     esp, 8	; pop 2 ints
    62                                  
    63 0000003B E85B000000                          call    test_fcn
    64 00000040 E87B000000                          call    test_fcn2
    65                                              
    66 00000045 B909000000                          mov	    ecx, done_len
    67 0000004A BE[54000000]                        mov	    esi, done
    68 0000004F BF[00000000]                        mov	    edi, buff
    69 00000054 FC                                  cld
    70 00000055 F3A4                                rep     movsb
    71                                              
    72 00000057 68[00000000]                        push    buff
    73 0000005C E8(00000000)                        call    printf
    74 00000061 81C404000000                        add     esp, 4	; pop int
    75                                              
    76                                              
    77 00000067 E899000000                          call sample_if      ; if code snippets
    78                                              
    79                                              
    80                                                      
    81 0000006C 68[54000000]                        push    done        ; Get length of done string
    82 00000071 E8(00000000)                        call    strlen
    83 00000076 81C404000000                        add     esp, 4
    84                                              
    85 0000007C 50                                  push    eax
    86 0000007D 6801000000                          push    1
    87 00000082 68[5D000000]                        push    result_str
    88 00000087 E8(00000000)                        call    printf      ; Print length of done string
    89 0000008C 81C40C000000                        add     esp, 12     
    90                                              
    91 00000092 89EC                                mov     esp, ebp	; takedown stack frame
    92 00000094 5D                                  pop     ebp		; same as "leave" op
    93                                  
    94 00000095 B800000000                          mov	    eax,0	;  normal, no error, return value
    95 0000009A C3                                  ret			; return
    96                                              
    97                                  
    98                                      test_fcn:
    99 0000009B 55                                  push    ebp		; set up stack frame
   100 0000009C 89E5                                mov     ebp, esp
   101                                              
   102 0000009E B90A000000                          mov     ecx, 10
   103                                          .beg_loop:
   104 000000A3 51                                  push    ecx
   105 000000A4 68[21000000]                        push    test_str
   106 000000A9 E8(00000000)                        call    printf
   107 000000AE 81C404000000                        add     esp, 4	; pop int
   108 000000B4 59                                  pop     ecx
   109 000000B5 E2EC                                loop    .beg_loop, ecx
   110                                          
   111 000000B7 89EC                                mov     esp, ebp	; takedown stack frame
   112 000000B9 5D                                  pop     ebp		; same as "leave" op
   113 000000BA B800000000                          mov	    eax,0	;  normal, no error, return value
   114 000000BF C3                                  ret
   115                                              
   116                                  
   117                                      test_fcn2:
   118 000000C0 C8000000                            enter   0, 0
   119 000000C4 680A000000                          push    10
   120 000000C9 E8(00000000)                        call    putchar
   121 000000CE 81C404000000                        add     esp, 4
   122                                              
   123 000000D4 B90A000000                          mov     ecx, 10
   124                                          .beg_loop:
   125 000000D9 51                                  push    ecx
   126 000000DA 68[3A000000]                        push    test_str2
   127 000000DF E8(00000000)                        call    printf
   128 000000E4 81C404000000                        add     esp, 4	; pop int
   129 000000EA 59                                  pop     ecx
   130 000000EB 81E901000000                        sub     ecx, 1      ;decrement loop counter by 1
   131 000000F1 75E6                                jnz     .beg_loop
   132                                              
   133                                              
   134 000000F3 68[54000000]                        push    done
   135 000000F8 E8(00000000)                        call    printf
   136 000000FD 81C404000000                        add     esp, 4	; pop int
   137                                              
   138 00000103 C9                                  leave
   139 00000104 C3                                  ret
   140                                              
   141                                              
   142                                      sample_if:
   143                                          ;prints first local variable if greater than or equal to 100
   144                                          ;else prints 50 if varaible is greater than or equal to 50 but less than 100
   145                                          ;else prints 0 if variable is less than 50
   146                                          
   147 00000105 C8000000                            enter   0, 0
   148 00000109 68AE000000                          push    174          ; condition {22, 77, 120}
   149                                              
   150 0000010E 8B45FC                              mov     eax, [ebp - 4]
   151 00000111 3D64000000                          cmp     eax, 100
   152 00000116 0F8315000000                        jae     near .label1
   153                                              
   154 0000011C 3D32000000                          cmp     eax, 50
   155 00000121 0F8310000000                        jae     near .label2
   156                                                          
   157 00000127 6800000000                          push    0
   158 0000012C E910000000                          jmp     .continue_fcn
   159                                  
   160                                              
   161                                          .label1: ;if greater than 100 print result = 100
   162 00000131 50                                  push    eax
   163 00000132 E90A000000                          jmp     .continue_fcn
   164                                              
   165                                             
   166                                          .label2: ;if greater than 100 print result = 100
   167 00000137 6832000000                          push    50
   168 0000013C E900000000                          jmp     .continue_fcn
   169                                             
   170                                             
   171                                          .continue_fcn:
   172 00000141 6801000000                          push    1
   173 00000146 68[5D000000]                        push    result_str
   174 0000014B E8(00000000)                        call    printf
   175 00000150 81C408000000                        add     esp, 8	; pop int and string
   176                                              
   177                                              
   178 00000156 81C404000000                        add     esp, 4	; pop condition
   179 0000015C C9                                  leave
   180 0000015D C3                                  ret
   181                                  
   182                                          
