     1                                  ;http://www.nasm.us/doc/nasmdoc0.html
     2                                  ;http://www.posix.nl/linuxassembly/nasmdochtml/nasmdoc0.html
     3                                  ;https://godbolt.org/
     4                                  ;https://linux.die.net/man/1/objdump
     5                                  
     6                                  extern printf
     7                                  extern putchar
     8                                  
     9                                  SECTION .data		
    10 00000000 05000000                        a:	dd	5
    11 00000004 613D25642C20656178-             fmt:    db      "a=%d, eax=%d", 33, 10, 10, 0
    12 0000000D 3D2564210A0A00     
    13 00000014 3031292048692D2564-             str:	db      "01) Hi-%d", 33, 0x21, 10, 0
    14 0000001D 21210A00           
    15                                          str_len equ $-str
    16                                          
    17 00000021 253264292054657374-             test_str: db "%2d) Test FCN Called!!!", 10, 0
    18 0000002A 2046434E2043616C6C-
    19 00000033 65642121210A00     
    20                                          test_str_len equ $-test_str
    21                                          
    22 0000003A 253264292054657374-             test_str2: db "%2d) Test FCN2 Called!!!", 10, 0
    23 00000043 2046434E322043616C-
    24 0000004C 6C65642121210A00   
    25                                          test_str2_len equ $-test_str2
    26                                  
    27 00000054 0A444F4E45210A00                done: db 10, "DONE!", 10, 0
    28                                          done_len equ $-done
    29                                          
    30 0000005C 0A0A25326429205265-             result_str: db 10,10,"%2d) Result = %d", 10, 10, 0
    31 00000065 73756C74203D202564-
    32 0000006E 0A0A00             
    33                                  
    34                                  
    35                                  SECTION .bss			; Section containing uninitialized data
    36                                  
    37                                          BUFFLEN	equ 1024	; Length of buffer
    38 00000000 <res 00000400>                  buff: 	resb BUFFLEN	; Text buffer itself
    39                                          
    40                                  
    41                                  SECTION .text
    42                                  
    43                                      global main		; the standard gcc entry point
    44                                      main:
    45 00000000 55                                  push    ebp		; set up stack frame
    46 00000001 89E5                                mov     ebp,esp     
    47                                  
    48 00000003 A1[00000000]                        mov	    eax, [a]	; put a from store into register
    49 00000008 0521000000                          add	    eax, 33	; a+33
    50 0000000D 50                                  push    eax		; push onto stack
    51 0000000E FF35[00000000]                      push    dword [a]	; value of variable a
    52 00000014 68[04000000]                        push    dword fmt	; address of ctrl string
    53 00000019 E8(00000000)                        call    printf	; Call C function
    54 0000001E 81C40C000000                        add     esp, 12	; pop 3 ints
    55                                              
    56 00000024 680D000000                          push    dword str_len
    57 00000029 8D05[15000000]                      lea     eax, [str + 1] ;skip first char in string
    58 0000002F 50                                  push    eax
    59 00000030 E8(00000000)                        call    printf	; Call C function
    60 00000035 81C408000000                        add     esp, 8	; pop 2 ints
    61                                  
    62 0000003B E835000000                          call    test_fcn
    63 00000040 E855000000                          call    test_fcn2
    64                                              
    65 00000045 B908000000                          mov	    ecx, done_len
    66 0000004A BE[54000000]                        mov	    esi, done
    67 0000004F BF[00000000]                        mov	    edi, buff
    68 00000054 FC                                  cld
    69 00000055 F3A4                                rep     movsb
    70                                              
    71 00000057 68[00000000]                        push    buff
    72 0000005C E8(00000000)                        call    printf
    73 00000061 81C404000000                        add     esp, 4	; pop int
    74                                              
    75                                              
    76 00000067 E873000000                          call sample_if      ; if code snippets
    77                                              
    78                                              
    79 0000006C 89EC                                mov     esp, ebp	; takedown stack frame
    80 0000006E 5D                                  pop     ebp		; same as "leave" op
    81                                  
    82 0000006F B800000000                          mov	    eax,0	;  normal, no error, return value
    83 00000074 C3                                  ret			; return
    84                                              
    85                                  
    86                                      test_fcn:
    87 00000075 55                                  push    ebp		; set up stack frame
    88 00000076 89E5                                mov     ebp, esp
    89                                              
    90 00000078 B90A000000                          mov     ecx, 10
    91                                          .beg_loop:
    92 0000007D 51                                  push    ecx
    93 0000007E 68[21000000]                        push    test_str
    94 00000083 E8(00000000)                        call    printf
    95 00000088 81C404000000                        add     esp, 4	; pop int
    96 0000008E 59                                  pop     ecx
    97 0000008F E2EC                                loop    .beg_loop, ecx
    98                                          
    99 00000091 89EC                                mov     esp, ebp	; takedown stack frame
   100 00000093 5D                                  pop     ebp		; same as "leave" op
   101 00000094 B800000000                          mov	    eax,0	;  normal, no error, return value
   102 00000099 C3                                  ret
   103                                              
   104                                  
   105                                      test_fcn2:
   106 0000009A C8000000                            enter   0, 0
   107 0000009E 680A000000                          push    10
   108 000000A3 E8(00000000)                        call    putchar
   109 000000A8 81C404000000                        add     esp, 4
   110                                              
   111 000000AE B90A000000                          mov     ecx, 10
   112                                          .beg_loop:
   113 000000B3 51                                  push    ecx
   114 000000B4 68[3A000000]                        push    test_str2
   115 000000B9 E8(00000000)                        call    printf
   116 000000BE 81C404000000                        add     esp, 4	; pop int
   117 000000C4 59                                  pop     ecx
   118 000000C5 81E901000000                        sub     ecx, 1      ;decrement loop counter by 1
   119 000000CB 75E6                                jnz     .beg_loop
   120                                              
   121                                              
   122 000000CD 68[54000000]                        push    done
   123 000000D2 E8(00000000)                        call    printf
   124 000000D7 81C404000000                        add     esp, 4	; pop int
   125                                              
   126 000000DD C9                                  leave
   127 000000DE C3                                  ret
   128                                              
   129                                              
   130                                      sample_if:
   131                                          ;prints first local variable if greater than or equal to 100
   132                                          ;else prints 50 if varaible is greater than or equal to 50 but less than 100
   133                                          ;else prints 0 if variable is less than 50
   134                                          
   135 000000DF C8000000                            enter   0, 0
   136 000000E3 68AE000000                          push    174          ; condition {22, 77, 120}
   137                                              
   138 000000E8 8B45FC                              mov     eax, [ebp - 4]
   139 000000EB 3D64000000                          cmp     eax, 100
   140 000000F0 0F8315000000                        jae     near .label1
   141                                              
   142 000000F6 3D32000000                          cmp     eax, 50
   143 000000FB 0F8310000000                        jae     near .label2
   144                                                          
   145 00000101 6800000000                          push    0
   146 00000106 E910000000                          jmp     .continue_fcn
   147                                  
   148                                              
   149                                          .label1: ;if greater than 100 print result = 100
   150 0000010B 50                                  push    eax
   151 0000010C E90A000000                          jmp     .continue_fcn
   152                                              
   153                                             
   154                                          .label2: ;if greater than 100 print result = 100
   155 00000111 6832000000                          push    50
   156 00000116 E900000000                          jmp     .continue_fcn
   157                                             
   158                                             
   159                                          .continue_fcn:
   160 0000011B 6801000000                          push    1
   161 00000120 68[5C000000]                        push    result_str
   162 00000125 E8(00000000)                        call    printf
   163 0000012A 81C408000000                        add     esp, 8	; pop int and string
   164                                              
   165                                              
   166 00000130 81C404000000                        add     esp, 4	; pop condition
   167 00000136 C9                                  leave
   168 00000137 C3                                  ret
   169                                  
   170                                          
